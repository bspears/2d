(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

module.exports = function() {
  return {
    walker: function(item, counter) {
      var speed    = item.maxSpeed;
      var random   = randomNumBetween(4);
      var thisItem = item;
      var pace     = counter;

      if(pace >= 100 && pace < 110){
        thisItem.xspeed = 0;
        thisItem.yspeed = 0;
      }
     if(pace === 220){
        thisItem.xspeed = 0;
        thisItem.yspeed = 0;
        pace = 0;
      }
      if(pace === 10){
        thisItem.xspeed = 0;
        thisItem.yspeed = 0;
        switch(random){
          case 1:
            thisItem.xspeed = -(speed);
            break;
          case 2:
            thisItem.xspeed = speed;
            break;
          case 3:
            thisItem.yspeed = -(speed);
            break;
          case 4:
            thisItem.yspeed = speed;
            break;
        }
      }
      else if(pace === 110){
        thisItem.xspeed = 0;
        thisItem.yspeed = 0;
        switch(random){
          case 1:
            thisItem.xspeed = -(speed);
            break;
          case 2:
            thisItem.xspeed = speed;
            break;
          case 3:
            thisItem.yspeed = -(speed);
            break;
          case 4:
            thisItem.yspeed = speed;
            break;      
        }
      }
    },
    seeker : function(item, counter, player) {
      var thisItem    = item;
      var speed       = thisItem.maxSpeed;
      var pace        = counter;
      var distPlayerX = thisItem.XPos - player.XPos;
      var distPlayerY = thisItem.YPos - player.YPos;
      var thisTurn    = Math.abs(distPlayerX) > Math.abs(distPlayerY);
      var inRange     = withinRange(thisItem, player, 300);

      if(counter > 50 && counter < 71 || counter > 120 && counter < 141) {
        thisItem.yspeed = 0;
        thisItem.xspeed = 0;
      }
      else if(inRange && (counter === 71 || counter === 141)) {
        switch(thisTurn) {
          case true:
            thisItem.yspeed = 0;
            thisItem.xspeed = distPlayerX > 0 ? -(speed) : speed;
            break;
          case false:
            thisItem.xspeed = 0;
            thisItem.yspeed = distPlayerY > 0 ? -(speed) : speed;
            break;
        }
      } 
    }
  }    
};
},{}],2:[function(require,module,exports){
var playerRunUp = new Image();
var runUpFrame = {
  "x" : 0,
  "y" : 0
};

playerRunUp.src = "images/playerRunUp.png";

var playerRunLeft = new Image();
var runLeftFrame = {
  "x" : 0,
  "y" : 0
};

playerRunLeft.src = "images/playerRunLeft.png";

var playerRunDown = new Image();
var runDownFrame = {
  "x" : 0,
  "y" : 0
};

playerRunDown.src = "images/playerRunDown.png";

var playerRunRight = new Image();
var runRightFrame = {
  "x" : 0,
  "y" : 0
};

playerRunRight.src = "images/playerRunright.png";

var playerAttack = new Image();
var attackFrame = {
  "x" : 0,
  "y" : 0
};

playerAttack.src ="images/stick.png";

var attackMove = new Image();
var attackMoveFrame = {
  "x" : 0,
  "y" : 0
};

attackMove.src ="images/attackMove.png";

var greenDoor = new Image();
var greenDoorFrame = {
  "x" : 0,
  "y" : 0
};

greenDoor.src ="images/secret.png";

var defaultImg = new Image();
defaultImg.src = "images/default.png";

var heartImg = new Image();
heartImg.src = "images/playerLife.png";

var heartContainerImg = new Image();
heartContainerImg.src = "images/heartContainer.png";

var oldBenImg = new Image();
oldBenImg.src = "images/oldBen.png";

var wedgeImg = new Image();
wedgeImg.src = "images/wedge.png";

var daisyImg = new Image();
daisyImg.src = "images/daisy.png";

var keyImg = new Image();
keyImg.src = "images/keyImg.png";

var relicImg = new Image();
relicImg.src = "images/relic.png";

var swordThumbImg = new Image();
swordThumbImg.src = "images/swordThumb.png";

var stickThumbImg = new Image();
stickThumbImg.src = "images/stickThumb.png";

var jewelImg = new Image();
jewelImg.src = "images/jewel.png";

var fishImg = new Image();
fishImg.src = "images/fish.png";

var dirtImg = new Image();
dirtImg.src = "images/dirt.png";

var greenHillImg = new Image();
greenHillImg.src = "images/greenHill.png";

var hillTopImg = new Image();
hillTopImg.src = "images/hillTop.png";

var waterImg = new Image();
waterImg.src = "images/waterImg.png";

var monsterImg = new Image();
monsterImg.src = "images/monster1.png";

var squidImg = new Image();
squidImg.src = "images/squidImg.png";

var chestImg = new Image();
chestImg.src = "images/chest.png";

var bushImg = new Image();
bushImg.src = "images/bush.png";

var giraffeImg = new Image();
giraffeImg.src = "images/giraffeImg.png";

var forrestTree1Img = new Image();
forrestTree1Img.src = "images/forrestTree1.png";

var backgroundImg = new Image();
backgroundImg.src = "images/background.png";

var forrestBackgroundImg = new Image();
forrestBackgroundImg.src = "images/forrestBackground.png";



var scripts = {
  "script1" : ["test script1","test script2"],
  "script2" : []
}


},{}],3:[function(require,module,exports){
// var pubsub = require('./pubsub');
var playerInfo = document.getElementById('playerInfo');
var tileSize = 30;
var textDisplay = {
  "value": false
};
var runAnimation = {
  "value": true
};

function randomNumBetween(highestNumber){
  return Math.ceil(Math.random() * highestNumber);
}

function runScript(script){
  textBox(script[0]);
}

function pause(){
  runAnimation.value = false;
}

function unPause(){
  runAnimation.value = true;
}

function changeState(gameState,value){
  gameState.value = value;
}

function removeFromArray(array,obj){
  var index = array.indexOf(obj);
  array.splice(index,1);
  return array;
}

function loseLife(character, enemy){
  character.lives -= enemy.attack;
}

function addLife(character,qty){
  character.lives += qty;
  if(character.lives>character.maxLives){
    character.lives = character.maxLives;
  }
}

function gameOver(){
  //show game over screen
}

function updatePlayerInfo(player){
  playerInfo.innerHTML = '<li class="name">' + player.name + '</li>';
  for(i=0;i<player.lives;i++){
    playerInfo.innerHTML += '<li class="icon"><img src="images/playerLife.png"></li>';
  }
}

function updateInventory(array){
  var items = " ";

  for(i=0; i<array.length;i++){
    items += '<li><img src="' + array[i].img.src + '"></li>';
  }
  return items;
}

function updateKeys(player){
  keys.innerHTML = '<span><img src="images/keyImg.png"> x ' + player.keys.length + '</span>';
}

function updateBank(target,value){
  target += value; 
  bank.innerHTML = '<span><img src="images/jewel.png"> x ' + target + '</span>';
  return target;
}

function frameCounter(frames){
  if(frames < 60){
    frames++;
  }
  else{
    frames = 1;
  }
  return frames;
}

function playerCollided(object,xpos,ypos,range){
  var distanceY = object.height ? object.height -3 : 27;
  var distanceX = object.width ? object.width - 3 : 27;

  if(range){
    distanceX += range;
    distanceY += range;
  }
  //up and down
  if(ypos - distanceY <= object.YPos && 
    ypos + distanceY > object.YPos  && 
    xpos + distanceX >= object.XPos && 
    xpos - distanceX <= object.XPos){
    return true;
  }
  //sides
  if(xpos - distanceX <= object.XPos && 
    xpos + distanceX > object.XPos  && 
    ypos + distanceY >= object.YPos && 
    ypos - distanceY <= object.YPos){
    return true;
  }
  else{
    return false;
  }
}

function withinRange(obj1,obj2,range){
  //code to detect if one object is in a certain range of another.
  var xRange = obj1.XPos - obj2.XPos;
  var yRange = obj1.YPos - obj2.YPos;

  if(Math.abs(xRange) <= range &&
     Math.abs(yRange) <= range){
    return true;
  } else {
    return false;
  }
}

function animationFlash(obj,frameCounter){
  if(frameCounter%2 === 0){
    obj.animate = false;
  }
  else{
    obj.animate = true;
  }
  return obj;
}

function drawItems(itemCollection) {
  for(var item in itemCollection){
    itemCollection[item].XPos = itemCollection[item].col*tileSize;
    itemCollection[item].YPos = itemCollection[item].row*tileSize;
  }
}

function chestOpen(chest,player){
  if(chest.locked === false){
    chest.open();
    chest.empty = true;
  }
  else if(chest.locked && player.keys.length > 0){
    chest.open();
    chest.empty = true;
    player.keys.pop();
    updateKeys(player);
  }
  else{
    textBox('It\'s locked. Maybe there is a key close by.');
  } 
}

function dropItem(obj){
  var dropChance = randomNumBetween(2);
  switch(dropChance){
    case 1:
      return new Heart({col:obj.XPos/30, row:obj.YPos/30}); 
    case 2:
      return new Money({col:obj.XPos/30, row:obj.YPos/30});
  }
}

function equip(player,item){
  player.equiped = item.name;
  player.attack  = item.attack;
  playerAttack.src = item.imgSrc;
  player.inventory.push(item); 
  return player;
}

// constructors

var GameObject = function(options) {
  Object.assign(this, options);
}

GameObject.prototype = {
  height:    30,
  width:     30,
  col:       0,
  row:       0,
  XPos:      0,
  YPos:      0,
  available: true,
  updatePos: function() {
    this.XPos = this.col * tileSize;
    this.YPos = this.row * tileSize;
  }
}

var Character = function(options) {
  this.hp = 1;
  this.xspeed = 0;
  this.yspeed = 0;
  this.maxSpeed = 0;
  this.attack = 0;
  GameObject.call(this, options);
  this.takeDamage = function(value) {
    this.hp -= value;
  };
};

Character.prototype = Object.create(GameObject.prototype);
Character.prototype.constructor = Character;

var Enemy = function(options){
  Character.call(this, options);
  this.hp          = 3;
  this.maxSpeed    = 1;
  this.xspeed      = 0;
  this.yspeed      = 0;
  this.attack      = 1;
};

Enemy.prototype = Object.create(Character.prototype);
Enemy.prototype.constructor = Enemy;

var SkullMan = function(options){
  Enemy.call(this, options);
  this.img = monsterImg;
  this.ai  = "walker";
};

SkullMan.prototype = Object.create(Enemy.prototype);
SkullMan.prototype.constructor = SkullMan;

var Squidy = function(options){
  Enemy.call(this, options);
  this.img      = squidImg;
  this.ai       = "seeker";
  this.maxSpeed = 2;
};

Squidy.prototype = Object.create(Enemy.prototype);
Squidy.prototype.constructor = Squidy;

var Npc = function(options){
  Character.call(this, options);
};

Npc.prototype = Object.create(Character.prototype);
Npc.prototype.constructor = Npc;
Npc.prototype.action = function(){
    textBox(this.text[0]);
    if(this.item){
      this.item();
      this.item = false;
    }
    else{
      textBox(this.text[1]);
    }
  };

var Collectable = function(options){
  this.type = "undefined";
  this.qty = 1;
  this.img = defaultImg;
  GameObject.call(this,options);
};

Collectable.prototype = Object.create(GameObject.prototype);
Collectable.prototype.constructor = Collectable;

var Key = function(options) {
  Collectable.call(this,options);
  this.type      = "key";
  this.img       = keyImg;
}

Key.prototype = Object.create(Collectable.prototype);
Key.prototype.constructor = Key;

var Weapon = function(options) {
  Collectable.call(this,options),
  this.type = "weapon"
};

Weapon.prototype = Object.create(Collectable.prototype);
Weapon.prototype.constructor = Weapon;

var Heart = function(options) {
  Collectable.call(this,options);
  this.type = 'heart';
  this.img  = heartImg;
}

Heart.prototype = Object.create(Collectable.prototype);
Heart.prototype.constructor = Heart;

var HeartContainer = function(options) {
  Collectable.call(this,options);
  this.type = 'heartContainer';
  this.img  = heartContainerImg;
}

HeartContainer.prototype = Object.create(Collectable.prototype);
HeartContainer.prototype.constructor = HeartContainer;

var Money = function(options) {
  Collectable.call(this,options);
  this.type = 'money';
  this.img  = jewelImg;
}

Money.prototype = Object.create(Collectable.prototype);
Money.prototype.constructor = Money;

var Chest = function Chest(options){
  this.img       = chestImg;
  this.locked    = false;
  this.contents  = undefined;
  this.empty     = false;
  GameObject.call(this, options);
};

Chest.prototype = Object.create(GameObject.prototype);
Chest.prototype.constructor = Chest;
Chest.prototype.open = function(){
    this.contents();
    this.contents = null;
  };

var Door = function(options) {
  this.dest = "null";
  this.destX = 0;
  this.destY = 0;
  GameObject.call(this,options);
};

Door.prototype = Object.create(GameObject.prototype);
Door.prototype.constructor = Door;

// var FishingPond = function Pond(col,row){
//   this.col = col;
//   this.row = row;
//   this.YPos = row*tileSize;
//   this.XPos = col*=tileSize;
//   this.available = true;
//   this.action = function(){
//     dropX = this.col;
//     dropY = this.row + 2;
    
//     if(randomNumBetween(4) == 4){
//       textBox('You caught a Mimi fish!');
//       levels.level1.collectables.push(new Collectable('fish',1,fishImg,true,dropX,dropY,'Fish'));
//     }
//     else{
//       textBox('Better luck next time.');
//     }
//   };
// };

// text box
function textBox(text){
  var box = document.getElementById('textBox');
  box.innerHTML = '<div class="textBoxContent">' + text + '</div>';
  pause();
  textDisplay.value = true;
}

function clearTextBox(){
  var box = document.getElementById('textBox');
  box.innerHTML = '';
  unPause();
  textDisplay.value = false;
}

function action(obj,player,playerXPos,playerYPos){
  //up action
  if(player.direction == "up" && 
    playerYPos <= obj.YPos + 50 && 
    playerYPos > obj.YPos && 
    playerXPos <= obj.XPos + 15 && 
    playerXPos >= obj.XPos - 15 ){
    obj.action();  
  }
  //down action
  if(player.direction == "down" && 
    playerYPos >= obj.YPos - 50 && 
    playerYPos < obj.YPos && 
    playerXPos <= obj.XPos + 15 && 
    playerXPos >= obj.XPos - 15 ){
    obj.action(); 
  }
  //right action
  if(player.direction == "right" && 
    playerXPos >= obj.XPos - 50 && 
    playerXPos < obj.XPos && 
    playerYPos <= obj.YPos + 15 && 
    playerYPos >= obj.YPos - 15 ){
    obj.action(); 
  }
  //left action
  if(player.direction == "left" && 
    playerXPos <= obj.XPos + 50 && 
    playerXPos > obj.XPos && 
    playerYPos <= obj.YPos + 15 && 
    playerYPos >= obj.YPos - 15 ){
    obj.action(); 
  }
}

},{}],4:[function(require,module,exports){
var levels = {
  "level1" : {
    "background" : "background.png",
    "map" : [
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,6,6,6,6,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,6,6,6,6,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,6,6,6,6,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,6,6,6,6,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,1],
      [1,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,1],
      [1,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,1],
      [1,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,1],
      [0,0,0,0,0,0,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
    ],
    "cols" : 160,
    "rows" : 35,
    "playerCol" : 5,
    "playerRow" : 31,
    "GameObjects" : {
      "enemies" : [
        new SkullMan({col:2, row:26, specialItem:'key'}),
        new SkullMan({col:11,row:26}),
        new SkullMan({col:80,row:26}),
        new SkullMan({col:55,row:15}),
        new SkullMan({col:100,row:10}),
        new SkullMan({col:86,row:6}),
        new Squidy({col:20,row:5}),
        new Squidy({col:25, row:3}),
        new Squidy({col:25, row:25}),
        new Squidy({col:11,row:2}),
        new Squidy({col:77,row:5}),
        new Squidy({col:130,row:5})
      ],
      "npcs" : [
        new Npc({
          img:oldBenImg,
          col:31,
          row:31,
          available:true,
          text:['Hello there, you will need more than that stick with these monsters lurking about. Take this...','Good Luck!'],
          item:function(){
            levels.level1.GameObjects.collectables.push(new Weapon({name:'steel sword',img:swordThumbImg,attack:3,col:30,row:32,imgSrc:'images/sword.png'})
          )}
        }),
        new Npc({
          img:daisyImg,
          col:3,
          row:3,
          available:true,
          text:[null,'What is happening!? Where did all of these things come from!?']
        }),
        new Npc({
          img:wedgeImg,
          col:133,
          row:25,
          available:true,
          text:[null,'I think I saw Rupert run to the dark forrest up north!']
        })
      ],
      "collectables" :  [
        new Heart({qty:2,col:12,row:13}),
        new Money({col:12,row:20}),
        new Money({col:20,row:20})
      ],
      "chests" : [
        new Chest({col:10, row:28, locked: true, contents: function(){
            levels.level1.GameObjects.collectables.push(new HeartContainer({col:12,row:28}));
          }}),
        new Chest({col:3, row: 21, contents: function(){
            levels.level1.GameObjects.collectables.push(new Money({col:2,row:21}));
          }})
      ],
      // "ponds" : [
      //   new FishingPond(6,26)
      // ],
      "doors" : [
        new Door({dest:"level2",col:143,row:1,destX:9,destY:3}),
        new Door({dest:"area1",col:0,row:25,destX:9,destY:3})
      ]
    }
  },

 // "level2" : {
 //    "background" : "forrestBackground.png",
 //    "map" : [
 //      [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8],
 //      [8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]
 //    ],
 //    "cols"      : 101,
 //    "rows"      : 35,
 //    "playerCol" : 50,
 //    "playerRow" : 32,
 //    "enemies"   : [
 //      new SkullMan({col:20,row:20}),
 //      new SkullMan({col:23,row:25})
 //    ],
 //    "collectables" :  [
 //      new Collectable('relic',1,relicImg,true,3,3)
 //    ],
 //    "doors"  : [
 //      new Door({dest:'level1',col:50,row:34,destX:143,destY:3})
 //    ],
 //    "chests" : [],
 //  },
 //  "dungeon1" : {
 //    "background" : "level2Dungeon1.png",
 //    "map" : [
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
 //      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
 //    ],
 //    "cols" : 95,
 //    "rows" : 19,
 //    "playerCol" : 24,
 //    "playerRow" : 16,
 //    "enemies" : [],
 //    "doors" : [
 //      new Door({ dest:'level2',col:23,row:18,destX:2,destY:19 })
 //    ]
 //  },
  "area1" : {
    "background" : "null",
    "map" : [
      [1,1,1,1,1,1,1,1,1,1,1],
      [1,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0,1],
      [1,1,1,1,1,1,1,1,1,1,1]
    ],
    "cols" : 11,
    "rows" : 6, 
    "GameObjects" : {
      "doors" : [
        new Door({ dest:'level1',col:11,row:3,destX:2,destY:25 })
      ],
      "enemies" : [],
      "npcs" : [
        new Npc({
          img:giraffeImg,
          height: 60,
          col: 3,
          row: 2,
          available: true,
          text:[null,'Hello there!']
        })
      ],
      "collectables" : [
        new Money({ qty:5,col:4,row:2 })
      ],
      "chests" : []
    },
    "playerCol" : 9,
    "playerRow" : 3,      
   },
  };

  module.exports = levels;
  
},{}],5:[function(require,module,exports){
module.exports = {
    "name"       : "Player",
    "lives"      : 3,
    "maxLives"   : 3,
    "maxSpeed"   : 3,
    "canMove"    : true,
    "row"        : 0,
    "col"        : 0,
    "XPos"       : 0,
    "YPos"       : 0,
    "xspeed"     : 0,
    "yspeed"     : 0,
    "attack"     : 1,
    "direction"  : "up",
    "recovering" : false,
    "attacking"  : false,
    "fishing"    : false,
    "equiped"    : "stick",
    "keys"       : [],
    "bank"       : 0,
    "inventory"  : [{"name" : "stick", "img" : stickThumbImg}],
    "animate"    : true
  };
},{}],6:[function(require,module,exports){
module.exports = function() {
    var events = {};
    var hasProp = events.hasOwnProperty;

    return {
        sub : function(event, listener) {
            //check if event exists, and add new event to events object if it does not yet exist.
            if(!hasProp.call(events, event)) events[event] = [];

            //push the listener to the new event's array;
            var index = events[event].push(listener) -1;

            //provide handle to remove event
            return {
                remove : function() {
                    delete events[event][index];
                }
            };
        },
        pub :  function(event, info) {
            //check to see if event exists, return if none.
            if(!hasProp.call(events, event)) return;

            //loop through events, fire
            events[event].forEach(function(item) {
                item(info != undefined ? info : {});
            })
        }
    };
}
},{}],7:[function(require,module,exports){
(function() {
  
  //dependencies 
  var gameApi    = require('./components/gameApi');
  var assets     = require('./components/assets');
  var levels     = require('./components/levels');
  var playerData = require('./components/player.js');
  var pubsubData = require('./components/pubsub');
  var enemyAi    = require('./components/ai');

  //game elements
  var thisLevel      = levels.level1;
  var thisBackground = document.getElementById('background');
  var port           = document.getElementById('viewport');
  var canvas         = document.getElementById('canvas');
  var canvas2        = document.getElementById('animation');
  var context        = canvas.getContext('2d');
  var context2       = canvas2.getContext('2d');
  var player         = new Character(playerData);
  var pubsub         = pubsubData();
  var ai             = enemyAi();

  //HUD elements
  var lives      = document.getElementById('lives');
  var playerInfo = document.getElementById('playerInfo');
  var inventory  = document.getElementById('inventory');
  var bank       = document.getElementById('bank');
  
  //states
  var leftScroll       = port.scrollLeft;
  var scrollTop        = port.scrollTop;
  var gameState        = { 'value':'play' };
  var backgroundRender = false;
  var recoverCount     = 0;
  var tileSize         = 30;
  var leftPressed      = false;
  var rightPressed     = false;
  var upPressed        = false;
  var downPressed      = false;
  var actionPressed    = false;
  var frameCount       = 0;
  var pace             = 0;
  var tick             = 0;


  //player initial positioning
  player.row = thisLevel.playerRow;
  player.col = thisLevel.playerCol;
  player.updatePos();

  //give all objects initial position values
  for(var object in thisLevel.GameObjects){
    var objects = thisLevel.GameObjects[object];

    for(item in objects) {
      objects[item].updatePos();
    }
  }

  //Key mapping
  document.addEventListener('keydown', function(e){
    switch(e.keyCode){
      case 65:
        leftPressed = true;
        player.direction = "left";
        break;
      case 87:
        upPressed = true;
        player.direction = "up";
        break;
      case 68:
        rightPressed = true;
        player.direction = "right";
        break;
      case 83:
        downPressed = true;
        player.direction = "down";
        break;
      case 16:
        if(tick < 10){
          player.attacking = true;
        }
        break;      
      case 191:
        if(textDisplay.value){
          actionPressed = false;
          clearTextBox();
          updateGame();
        }
        else{
          actionPressed = true;
        }
        break;  
    }
  }, false);

  document.addEventListener('keyup', function(e){
    switch(e.keyCode){
      case 65:
        leftPressed = false;
        break;
      case 87:
        upPressed = false;
        break;
      case 68:
        rightPressed = false;
        break;
      case 83:
        downPressed = false;
        break;
      case 16:
        player.attacking = false;
        tick = 0;
        break;
      case 191:
        actionPressed = false;
        break;  
    }
  }, false);

  //build level
  function renderBackground(){
    background.innerHTML = '<img src="images/'+ thisLevel.background +'">';
    canvas.width         = tileSize*thisLevel.cols;
    canvas.height        = tileSize*thisLevel.rows;
    canvas2.width        = tileSize*thisLevel.cols;
    canvas2.height       = tileSize*thisLevel.rows;
    port.scrollTop       = player.YPos;
    port.scrollLeft      = player.XPos-500;
    inventory.innerHTML  = updateInventory(player.inventory);
    context2.clearRect(0,0, canvas2.width, canvas2.height);

    //water
    waterImg.onload = function(){
      for(var i=0;i<thisLevel.rows;i++){
        for(var j=0;j<thisLevel.cols;j++){
          if(thisLevel.map[i][j]==3){
            context2.drawImage(waterImg,0,0,30,30,j*tileSize,i*tileSize,tileSize,tileSize);
          }
        }
      }
    };

    //walls
    greenHillImg.onload = function(){
      for(var i=0;i<thisLevel.rows;i++){
        for(var j=0;j<thisLevel.cols;j++){
          if(thisLevel.map[i][j]==1){
            context2.drawImage(greenHillImg,0,0,30,30,j*tileSize,i*tileSize,tileSize,tileSize);
          }
        }
      }
    };

    //bushes
    bushImg.onload = function(){
      for(var i=0;i<thisLevel.rows;i++){
        for(var j=0;j<thisLevel.cols;j++){
          if(thisLevel.map[i][j]==4){
            context2.drawImage(bushImg,0,0,30,30,j*tileSize,i*tileSize,tileSize,tileSize);
          }
        }
      }
    };

    //forrest tree
    forrestTree1Img.onload = function(){
      for(var i=0;i<thisLevel.rows;i++){
        for(var j=0;j<thisLevel.cols;j++){
          if(thisLevel.map[i][j]==5){
            context2.drawImage(forrestTree1Img,0,30,30,60,j*tileSize,i*tileSize,tileSize,60);
          }
        }
      }
    };

    //rockyTops
    hillTopImg.onload = function(){
      for(var i=0;i<thisLevel.rows;i++){
        for(var j=0;j<thisLevel.cols;j++){
          if(thisLevel.map[i][j]==2){
            context2.drawImage(hillTopImg,0,0,30,30,j*tileSize,i*tileSize,tileSize,tileSize);
          }
        }
      }
    };
  }

  function reRender(){
    background.innerHTML = '<img src="images/'+ thisLevel.background +'">';
    canvas.width         = tileSize*thisLevel.cols;
    canvas.height        = tileSize*thisLevel.rows;
    canvas2.width        = tileSize*thisLevel.cols;
    canvas2.height       = tileSize*thisLevel.rows;
    port.scrollTop       = player.YPos;
    port.scrollLeft      = player.XPos-500;
    context2.clearRect(0,0, canvas2.width, canvas2.height);

    player.updatePos();

    //update game object locations
    for(var object in thisLevel.GameObjects){
      var objects = thisLevel.GameObjects[object];

      for(item in objects) {
        objects[item].updatePos();
      }
    }

    //water
    for(var i=0;i<thisLevel.rows;i++){
      for(j=0;j<thisLevel.cols;j++){
        if(thisLevel.map[i][j]==3){
          context2.drawImage(waterImg,0,0,30,30,j*tileSize,i*tileSize,tileSize,tileSize);
        }
      }
    }

    //walls
    for(i=0;i<thisLevel.rows;i++){
      for(j=0;j<thisLevel.cols;j++){
        if(thisLevel.map[i][j]==1){
          context2.drawImage(greenHillImg,0,0,30,30,j*tileSize,i*tileSize,tileSize,tileSize);
        }
      }
    }

    //bushes
    for(i=0;i<thisLevel.rows;i++){
      for(j=0;j<thisLevel.cols;j++){
        if(thisLevel.map[i][j]==4){
          context2.drawImage(bushImg,0,0,30,30,j*tileSize,i*tileSize,tileSize,tileSize);
        }
      }
    }

    //forrest tree
    for(i=0;i<thisLevel.rows;i++){
      for(j=0;j<thisLevel.cols;j++){
        if(thisLevel.map[i][j]==5){
          context2.drawImage(forrestTree1Img,0,0,30,30,j*tileSize,i*tileSize,tileSize,tileSize);
        }
      }
    }

    //rockyTops
    for(i=0;i<thisLevel.rows;i++){
      for(j=0;j<thisLevel.cols;j++){
        if(thisLevel.map[i][j]==2){
          context2.drawImage(hillTopImg,0,0,30,30,j*tileSize,i*tileSize,tileSize,tileSize);
        }
      }
    }
  }

  function renderLevel(){
    context.clearRect(0,0, canvas.width, canvas.height);

    //draw each game object
    for(object in thisLevel.GameObjects){
      var objects = thisLevel.GameObjects[object];

      for(object in objects){
        var item   = objects[object];
        var width  = item.width ? item.width : 30;
        var height = item.height ? item.height : 30;

        if(item.img && item.available) {
          context.drawImage(item.img,0,0,width,height,item.XPos,item.YPos,width,height);
        }
      }
    }

    //player
    if(player.animate && player.attacking === false){
      if(player.direction === "up"){
        context.drawImage(playerRunUp,runUpFrame.x,runUpFrame.y,30,30,player.XPos,player.YPos,30,30); 
      }
      if(player.direction === "down"){
        context.drawImage(playerRunDown,runDownFrame.x,runDownFrame.y,30,30,player.XPos,player.YPos,30,30); 
      }
      if(player.direction === "right"){
        context.drawImage(playerRunRight,runRightFrame.x,runRightFrame.y,30,30,player.XPos,player.YPos,30,30); 
      }
      if(player.direction === "left"){
        context.drawImage(playerRunLeft,runLeftFrame.x,runLeftFrame.y,30,30,player.XPos,player.YPos,30,30); 
      }
    }
    else if(player.attacking || player.fishing){
      if(player.direction === "up"){
        context.drawImage(attackMove,0,0,30,30,player.XPos,player.YPos,30,30); 
      }
      if(player.direction === "down"){
        context.drawImage(attackMove,60,0,30,30,player.XPos,player.YPos,30,30); 
      }
      if(player.direction === "right"){
        context.drawImage(attackMove,30,0,30,30,player.XPos,player.YPos,30,30); 
      }
      if(player.direction === "left"){
        context.drawImage(attackMove,90,0,30,30,player.XPos,player.YPos,30,30); 
      }
    }

    if(player.attacking){
      if(tick < 10){
        switch(player.direction){
          case "up":
            context.drawImage(playerAttack,attackFrame.x,attackFrame.y,30,30,player.XPos,player.YPos-30,30,30);
            tick += 1;
            break;
          case "right":
            context.drawImage(playerAttack,attackFrame.x+30,attackFrame.y,30,30,player.XPos+30,player.YPos,30,30);
            tick += 1;
            break;
          case "down":
            context.drawImage(playerAttack,attackFrame.x+60,attackFrame.y,30,30,player.XPos,player.YPos+30,30,30);
            tick += 1; 
            break;
          case "left":
            context.drawImage(playerAttack,attackFrame.x+90,attackFrame.y,30,30,player.XPos-30,player.YPos,30,30);
            tick += 1; 
            break;
        }
      }
      else if(tick <= 7){
        tick += 1;
      }
    }

    if(player.fishing){
      switch(player.direction){
        case "up":
          context.drawImage(playerAttack,attackFrame.x,attackFrame.y,30,30,player.XPos,player.YPos-30,30,30);
          break;
        case "right":
          context.drawImage(playerAttack,attackFrame.x+30,attackFrame.y,30,30,player.XPos+30,player.YPos,30,30);
          break;
        case "down":
          context.drawImage(playerAttack,attackFrame.x+60,attackFrame.y,30,30,player.XPos,player.YPos+30,30,30);
          break;
        case "left":
          context.drawImage(playerAttack,attackFrame.x+90,attackFrame.y,30,30,player.XPos-30,player.YPos,30,30);
          break;
      }   
    }
  }

  //Frame rate 
  window.requestAnimFrame = (function(callback) {
  return window.requestAnimFrame ||
         window.webkitRequestAnimationFrame ||
         window.mozRequestAnimationFrame ||
         function(callback) {
          window.setTimeout(callback, 1000/60);
        };
  }) ();

  function updateGame() {
    //update player lives and stats
    updatePlayerInfo(player);
    
    //60 frame loop
    frameCount = frameCounter(frameCount);
    player.yspeed = 0;
    player.xspeed = 0;

    //player movement
    if(rightPressed && player.attacking === false && player.fishing === false){
      player.xspeed=player.maxSpeed;
      if(runRightFrame.x < 61){
        if(frameCount%10 === 0){
          runRightFrame.x += 30;
        }
      }
      if(runRightFrame.x>60){
        runRightFrame.x = 0;
      }
    }
    else{
      if(leftPressed && player.attacking === false && player.fishing === false){
        player.xspeed=-player.maxSpeed;
        if(runLeftFrame.x < 61){
          if(frameCount%10 === 0){
            runLeftFrame.x += 30;
          }
        }
        if(runLeftFrame.x>60){
          runLeftFrame.x = 0;
        }
      }
      else{
        if(upPressed && player.attacking === false && player.fishing === false){
          player.yspeed=-player.maxSpeed;
          if(runUpFrame.x < 61){
            if(frameCount%10 === 0){
              runUpFrame.x += 30;
            }
          }
          if(runUpFrame.x>60){
            runUpFrame.x = 30;
          }
        }
        else{
          if(downPressed && player.attacking === false && player.fishing === false){
            player.yspeed=player.maxSpeed;
            if(runDownFrame.x < 61){
              if(frameCount%10 === 0){
                runDownFrame.x += 30;
              }
            }
            if(runDownFrame.x>60){
            runDownFrame.x = 30;
            }
          }
        }
      }
    }

    if(player.yspeed <0){
      player.direction = "up";
    }
    if(player.yspeed >0){
      player.direction = "down";
    }
    if(player.xspeed <0){
      player.direction = "left";
    }
    if(player.xspeed >0){
      player.direction = "right";
    }

    player.XPos+=player.xspeed;
    player.YPos+=player.yspeed;

    //scrolling
    port.scrollTop = player.YPos-250;
    port.scrollLeft = player.XPos-450;

    //enemy intelligence
    for(enemy in thisLevel.GameObjects.enemies){
      var thisEnemy = thisLevel.GameObjects.enemies[enemy];
      var thisAi    = thisEnemy.ai;

      ai[thisAi](thisEnemy, pace, player);
      thisEnemy.XPos+=thisEnemy.xspeed;
      thisEnemy.YPos+=thisEnemy.yspeed;
    }
    
    if(pace === 211) {
      pace = 0;
    }

    pace++;

    //collision
    (function playerCollision() {
      var baseCol    = Math.floor(player.XPos/tileSize);
      var baseRow    = Math.floor(player.YPos/tileSize);
      var colOverlap = player.XPos%tileSize;
      var rowOverlap = player.YPos%tileSize;

      //Horzontal collision
      if(player.xspeed>0){
        if((thisLevel.map[baseRow][baseCol+1]>0 && !thisLevel.map[baseRow][baseCol]) ||
           (thisLevel.map[baseRow+1][baseCol+1]>0 && !thisLevel.map[baseRow+1][baseCol] && rowOverlap)){
          player.XPos=baseCol*tileSize;
        }
      }

      if(player.xspeed<0){
        if((!thisLevel.map[baseRow][baseCol+1]>0 && thisLevel.map[baseRow][baseCol]) ||
           (!thisLevel.map[baseRow+1][baseCol+1]>0 && thisLevel.map[baseRow+1][baseCol] && rowOverlap)){
          player.XPos=(baseCol+1)*tileSize;
        }
      }

      //Vertical collision
      if(player.yspeed>0){
        if((thisLevel.map[baseRow+1][baseCol]>0 && !thisLevel.map[baseRow][baseCol]) ||
           (thisLevel.map[baseRow+1][baseCol+1]>0 && !thisLevel.map[baseRow][baseCol+1] && colOverlap)){
          player.YPos = baseRow*tileSize;
        }
      }

      if(player.yspeed<0){
        if((!thisLevel.map[baseRow+1][baseCol]>0 && thisLevel.map[baseRow][baseCol]) ||
           (!thisLevel.map[baseRow+1][baseCol+1]>0 && thisLevel.map[baseRow][baseCol+1] && rowOverlap)){
          player.YPos=(baseRow+1)*tileSize;
        }
      }
    }) ();  

    //object collision
    for(var chest in thisLevel.GameObjects.chests){
      var thisChest = thisLevel.GameObjects.chests[chest];
      if(playerCollided(thisChest,player.XPos,player.YPos)){
        if(player.yspeed<0){
          player.YPos=thisChest.YPos+tileSize;
        }
        if(player.yspeed>0){
          player.YPos=thisChest.YPos-tileSize;
        }
        if(player.xspeed>0){
          player.XPos=thisChest.XPos-tileSize;
        }
        if(player.xspeed<0){
          player.XPos=thisChest.XPos+tileSize;
        }
      }    
    }

    for(var npc in thisLevel.GameObjects.npcs){
      var thisnpc = thisLevel.GameObjects.npcs[npc];
      if(playerCollided(thisnpc,player.XPos,player.YPos)){
        if(player.yspeed<0){
          player.YPos=thisnpc.YPos+tileSize;
        }
        if(player.yspeed>0){
          player.YPos=thisnpc.YPos-tileSize;
        }
        if(player.xspeed>0){
          player.XPos=thisnpc.XPos-tileSize;
        }
        if(player.xspeed<0){
          player.XPos=thisnpc.XPos+tileSize;
        }
      }    
    }
    
    //enemy collision
    //Horzontal collision

      for(enemy in thisLevel.GameObjects.enemies){
        var thisEnemy  = thisLevel.GameObjects.enemies[enemy];
        var baseCol    = Math.floor(thisEnemy.XPos/tileSize);
        var baseRow    = Math.floor(thisEnemy.YPos/tileSize);
        var colOverlap = thisEnemy.XPos%tileSize;
        var rowOverlap = thisEnemy.YPos%tileSize;
    
        if(thisEnemy.xspeed>0){
          if((thisLevel.map[baseRow][baseCol+1] && !thisLevel.map[baseRow][baseCol]) ||
             (thisLevel.map[baseRow+1][baseCol+1] && !thisLevel.map[baseRow+1][baseCol] && rowOverlap)){
            thisEnemy.XPos=baseCol*tileSize;
          }
        }
    
        if(thisEnemy.xspeed<0){
          if((!thisLevel.map[baseRow][baseCol+1] && thisLevel.map[baseRow][baseCol]) ||
             (!thisLevel.map[baseRow+1][baseCol+1] && thisLevel.map[baseRow+1][baseCol] && rowOverlap)){
            thisEnemy.XPos=(baseCol+1)*tileSize;
          }
        }
    
        //Vertical collision
        if(thisEnemy.yspeed>0){
          if((thisLevel.map[baseRow+1][baseCol] && !thisLevel.map[baseRow][baseCol]) ||
            (thisLevel.map[baseRow+1][baseCol+1] && !thisLevel.map[baseRow][baseCol+1] && colOverlap)){
            thisEnemy.YPos = baseRow*tileSize;
          }
        }
    
        if(thisEnemy.yspeed<0){
          if((!thisLevel.map[baseRow+1][baseCol] && thisLevel.map[baseRow][baseCol]) ||
            (!thisLevel.map[baseRow+1][baseCol+1] && thisLevel.map[baseRow][baseCol+1] && rowOverlap)){
            thisEnemy.YPos=(baseRow+1)*tileSize;
          }
        }
      }

    //item pick up
    for(var item in thisLevel.GameObjects.collectables){
      if(thisLevel.GameObjects.collectables[item].available && playerCollided(thisLevel.GameObjects.collectables[item],player.XPos,player.YPos)){
        thisLevel.GameObjects.collectables[item].available = false;
        switch(thisLevel.GameObjects.collectables[item].type){
          case "heart":
            addLife(player,thisLevel.GameObjects.collectables[item].qty);
            break;
          case "heartContainer":
            addLife(player,thisLevel.GameObjects.collectables[item].qty);
            player.maxLives += 1;
            player.lives = player.maxLives;
            textBox('"I feel stronger somehow..."');
            break;
          case "weapon":
            player = equip(player,thisLevel.GameObjects.collectables[item]);
            updateInventory(player.inventory);
            inventory.innerHTML = updateInventory(player.inventory);
            break;
          case "key":
            player.keys.push(thisLevel.GameObjects.collectables[item]);
            updateKeys(player);
            break;
          case "money":
            player.bank = updateBank(player.bank, thisLevel.GameObjects.collectables[item].qty);
            break;
          case "relic":
            player.inventory.push(thisLevel.GameObjects.collectables[item]);
            inventory.innerHTML = updateInventory(player.inventory);
            textBox('It\'s a strange metal bar. It looks like it was meant to have some sort of function.' );
            break;
          case "fish":
            player.inventory.push(thisLevel.GameObjects.collectables[item]);
            updateInventory(player.inventory);
            break;
        }
        if(thisLevel.GameObjects.collectables[item].name === 'end'){
          thisLevel = levels.level2;
          reRender();
        } 
      }
    }  

    //damage
    for(var enemy in thisLevel.GameObjects.enemies){  
      if(playerCollided(thisLevel.GameObjects.enemies[enemy],player.XPos,player.YPos) && player.recovering === false){
        //take damage
        loseLife(player,thisLevel.GameObjects.enemies[enemy]);
        player.recovering = true;
        //bump backward
        if(player.xspeed < 0 || thisLevel.GameObjects.enemies[enemy].xspeed > 0 && player.yspeed === 0){
          player.XPos += 80;
        }
        else if(player.xspeed > 0 || thisLevel.GameObjects.enemies[enemy].xspeed < 0 && player.yspeed === 0){
          player.XPos -= 80;
        }
        else if(player.yspeed > 0 || thisLevel.GameObjects.enemies[enemy].yspeed < 0){
          player.YPos -= 80;
        }
        else if(player.yspeed < 0 || thisLevel.GameObjects.enemies[enemy].yspeed > 0){
          player.YPos += 80;
        }
      }
    } 

    if(player.recovering === true){
      recoverCount += 1;
      animationFlash(player,frameCount);
      if(recoverCount === 60){
        player.recovering = false;
        recoverCount = 0;
        player.animate = true;
      }
    }

    if(player.lives<=0){
      runAnimation.value = false;
      textBox('Game Over');
    } 

    //attack
    if(player.attacking && tick > 2 && tick < 4){
      for(var enemy in thisLevel.GameObjects.enemies){
        var thisEnemy = thisLevel.GameObjects.enemies[enemy];
        //up attack
        if(player.direction === "up" && 
          player.YPos - 53 <= thisEnemy.YPos && 
          player.YPos > thisEnemy.YPos && 
          player.XPos + 29 >= thisEnemy.XPos && 
          player.XPos - 29 <= thisEnemy.XPos ){
          thisEnemy.takeDamage(player.attack);
          thisEnemy.YPos -= 20;
          console.log(player.attack);
        }
        //down attack
        if(player.direction === "down" && 
          player.YPos + 53 > thisEnemy.YPos  && 
          player.YPos < thisEnemy.YPos && 
          player.XPos + 29 >= thisEnemy.XPos && 
          player.XPos - 29 <= thisEnemy.XPos ){
          thisEnemy.takeDamage(player.attack);
          thisEnemy.YPos += 20;
        }
        // //right attack
        if(player.direction === "right" && 
          player.XPos + 53 >= thisEnemy.XPos && 
          player.XPos < thisEnemy.XPos && 
          player.YPos + 29 >= thisEnemy.YPos && 
          player.YPos - 29 <= thisEnemy.YPos ){
          thisEnemy.takeDamage(player.attack);
          thisEnemy.XPos += 20;
        }
        // //left attack
        if(player.direction === "left" && 
          player.XPos - 53 <= thisEnemy.XPos && 
          player.XPos > thisEnemy.XPos && 
          player.YPos + 29 >= thisEnemy.YPos && 
          player.YPos - 29 <= thisEnemy.YPos ){
          thisEnemy.takeDamage(player.attack);
          thisEnemy.XPos -= 20;
        }
        if(thisEnemy.hp <= 0){
          var currentx = thisEnemy.XPos/30;
          var currenty = thisEnemy.YPos/30;
          if(thisEnemy.specialItem){
            switch(thisEnemy.specialItem){
              case "key":
              thisLevel.GameObjects.collectables.push(new Key({col:currentx,row:currenty}));
              drawItems(thisLevel.GameObjects.collectables);
              break;
            }
          }    
          else if(randomNumBetween(3) === 1){
            thisLevel.GameObjects.collectables.push(dropItem(thisEnemy));
            drawItems(thisLevel.GameObjects.collectables);
          }
          removeFromArray(thisLevel.GameObjects.enemies,thisEnemy);
        }
      }
    }

    //action button
    if(actionPressed){
      for(var chest in thisLevel.GameObjects.chests){
        var thisChest = thisLevel.GameObjects.chests[chest];
        if(thisChest.empty === false){
          //up action
          if(player.direction === "up" && 
            player.YPos <= thisChest.YPos + 50 && 
            player.YPos > thisChest.YPos && 
            player.XPos <= thisChest.XPos + 15 && 
            player.XPos >= thisChest.XPos - 15 ){
            chestOpen(thisChest, player, keys);
            drawItems(thisLevel.GameObjects.collectables);
          }
          //down action
          if(player.direction === "down" && 
            player.YPos >= thisChest.YPos - 50 && 
            player.YPos < thisChest.YPos && 
            player.XPos <= thisChest.XPos + 15 && 
            player.XPos >= thisChest.XPos - 15 ){
            chestOpen(thisChest, player, keys);
            drawItems(thisLevel.GameObjects.collectables);
          }
          //right action
          if(player.direction === "right" && 
            player.XPos >= thisChest.YPos - 50 && 
            player.XPos < thisChest.XPos && 
            player.YPos <= thisChest.YPos + 15 && 
            player.YPos >= thisChest.YPos - 15 ){
            chestOpen(thisChest, player, keys);
            drawItems(thisLevel.GameObjects.collectables);
          }
          //left action
          if(player.direction === "left" && 
            player.XPos <= thisChest.YPos + 50 && 
            player.XPos > thisChest.XPos && 
            player.YPos <= thisChest.YPos + 15 && 
            player.YPos >= thisChest.YPos - 15 ){
            chestOpen(thisChest, player, keys);
            drawItems(thisLevel.GameObjects.collectables);
          }
        }  
      }
      for(npc in thisLevel.GameObjects.npcs){
        thisnpc = thisLevel.GameObjects.npcs[npc];
        action(thisnpc,player,player.XPos,player.YPos);
        drawItems(thisLevel.GameObjects.collectables);
      }
      for(var pond in thisLevel.ponds){
        var thisPond = thisLevel.ponds[pond];
        action(thisPond,player,player.XPos,player.YPos);
      }
      actionPressed = false;
    }

    for(var door in thisLevel.GameObjects.doors){
      var currentLevel = thisLevel;
      var thisDoor     = currentLevel.GameObjects.doors[door];
      var thisArea     = currentLevel.GameObjects.doors[door].dest;

      if(playerCollided(thisDoor,player.XPos,player.YPos, 4)){
        thisLevel  = levels[thisArea];
        player.col = thisDoor.destX;
        player.row = thisDoor.destY;
        reRender();
      }
    }

    renderLevel();

    if(backgroundRender === false){
      renderBackground();
      backgroundRender = true;
    }

    if(runAnimation.value === true){
      requestAnimFrame(function() {
        updateGame();
      });
    }
  }

  updateGame();

}) ();

},{"./components/ai":1,"./components/assets":2,"./components/gameApi":3,"./components/levels":4,"./components/player.js":5,"./components/pubsub":6}]},{},[7]);
